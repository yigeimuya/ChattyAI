<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cike.chatgpt.repository.mapper.OpenaiKeyConfigMapper">
  <resultMap id="BaseResultMap" type="cike.chatgpt.repository.entity.OpenaiKeyConfig">
    <id column="id" jdbcType="BIGINT" property="id"/>
    <result column="account_id" jdbcType="VARCHAR" property="accountId"/>
    <result column="openai_key" jdbcType="VARCHAR" property="openaiKey"/>
    <result column="support_model" jdbcType="VARCHAR" property="supportModel"/>
    <result column="total_use_token" jdbcType="INTEGER" property="totalUseToken"/>
    <result column="total_use_money" jdbcType="INTEGER" property="totalUseMoney"/>
    <result column="max_use_money" jdbcType="INTEGER" property="maxUseMoney"/>
    <result column="status" jdbcType="TINYINT" property="status"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    <result column="expired_time" jdbcType="TIMESTAMP" property="expiredTime"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, account_id, openai_key, support_model, total_use_token, total_use_money, max_use_money, 
    `status`, create_time, expired_time
  </sql>
  <select id="selectByExample" parameterType="cike.chatgpt.repository.entity.OpenaiKeyConfigExample"
    resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List"/>
    from openai_key_config
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from openai_key_config
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete
    from openai_key_config
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="cike.chatgpt.repository.entity.OpenaiKeyConfigExample">
    delete from openai_key_config
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </delete>
  <insert id="insert" parameterType="cike.chatgpt.repository.entity.OpenaiKeyConfig">
    insert into openai_key_config (id, account_id, openai_key,
                                   support_model, total_use_token, total_use_money,
                                   max_use_money, `status`, create_time,
                                   expired_time)
    values (#{id,jdbcType=BIGINT}, #{accountId,jdbcType=VARCHAR}, #{openaiKey,jdbcType=VARCHAR},
            #{supportModel,jdbcType=VARCHAR}, #{totalUseToken,jdbcType=INTEGER}, #{totalUseMoney,jdbcType=INTEGER},
            #{maxUseMoney,jdbcType=INTEGER}, #{status,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP},
            #{expiredTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="cike.chatgpt.repository.entity.OpenaiKeyConfig">
    insert into openai_key_config
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="accountId != null">
        account_id,
      </if>
      <if test="openaiKey != null">
        openai_key,
      </if>
      <if test="supportModel != null">
        support_model,
      </if>
      <if test="totalUseToken != null">
        total_use_token,
      </if>
      <if test="totalUseMoney != null">
        total_use_money,
      </if>
      <if test="maxUseMoney != null">
        max_use_money,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="expiredTime != null">
        expired_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="accountId != null">
        #{accountId,jdbcType=VARCHAR},
      </if>
      <if test="openaiKey != null">
        #{openaiKey,jdbcType=VARCHAR},
      </if>
      <if test="supportModel != null">
        #{supportModel,jdbcType=VARCHAR},
      </if>
      <if test="totalUseToken != null">
        #{totalUseToken,jdbcType=INTEGER},
      </if>
      <if test="totalUseMoney != null">
        #{totalUseMoney,jdbcType=INTEGER},
      </if>
      <if test="maxUseMoney != null">
        #{maxUseMoney,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="expiredTime != null">
        #{expiredTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cike.chatgpt.repository.entity.OpenaiKeyConfigExample"
    resultType="java.lang.Long">
    select count(*) from openai_key_config
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update openai_key_config
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.accountId != null">
        account_id = #{record.accountId,jdbcType=VARCHAR},
      </if>
      <if test="record.openaiKey != null">
        openai_key = #{record.openaiKey,jdbcType=VARCHAR},
      </if>
      <if test="record.supportModel != null">
        support_model = #{record.supportModel,jdbcType=VARCHAR},
      </if>
      <if test="record.totalUseToken != null">
        total_use_token = #{record.totalUseToken,jdbcType=INTEGER},
      </if>
      <if test="record.totalUseMoney != null">
        total_use_money = #{record.totalUseMoney,jdbcType=INTEGER},
      </if>
      <if test="record.maxUseMoney != null">
        max_use_money = #{record.maxUseMoney,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.expiredTime != null">
        expired_time = #{record.expiredTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update openai_key_config
    set id = #{record.id,jdbcType=BIGINT},
    account_id = #{record.accountId,jdbcType=VARCHAR},
    openai_key = #{record.openaiKey,jdbcType=VARCHAR},
    support_model = #{record.supportModel,jdbcType=VARCHAR},
    total_use_token = #{record.totalUseToken,jdbcType=INTEGER},
    total_use_money = #{record.totalUseMoney,jdbcType=INTEGER},
    max_use_money = #{record.maxUseMoney,jdbcType=INTEGER},
    `status` = #{record.status,jdbcType=TINYINT},
    create_time = #{record.createTime,jdbcType=TIMESTAMP},
    expired_time = #{record.expiredTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cike.chatgpt.repository.entity.OpenaiKeyConfig">
    update openai_key_config
    <set>
      <if test="accountId != null">
        account_id = #{accountId,jdbcType=VARCHAR},
      </if>
      <if test="openaiKey != null">
        openai_key = #{openaiKey,jdbcType=VARCHAR},
      </if>
      <if test="supportModel != null">
        support_model = #{supportModel,jdbcType=VARCHAR},
      </if>
      <if test="totalUseToken != null">
        total_use_token = #{totalUseToken,jdbcType=INTEGER},
      </if>
      <if test="totalUseMoney != null">
        total_use_money = #{totalUseMoney,jdbcType=INTEGER},
      </if>
      <if test="maxUseMoney != null">
        max_use_money = #{maxUseMoney,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="expiredTime != null">
        expired_time = #{expiredTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="cike.chatgpt.repository.entity.OpenaiKeyConfig">
    update openai_key_config
    set account_id      = #{accountId,jdbcType=VARCHAR},
        openai_key      = #{openaiKey,jdbcType=VARCHAR},
        support_model   = #{supportModel,jdbcType=VARCHAR},
        total_use_token = #{totalUseToken,jdbcType=INTEGER},
        total_use_money = #{totalUseMoney,jdbcType=INTEGER},
        max_use_money   = #{maxUseMoney,jdbcType=INTEGER},
        `status`        = #{status,jdbcType=TINYINT},
        create_time     = #{createTime,jdbcType=TIMESTAMP},
        expired_time    = #{expiredTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>