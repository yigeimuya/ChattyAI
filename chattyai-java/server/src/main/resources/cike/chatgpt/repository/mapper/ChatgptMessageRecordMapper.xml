<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cike.chatgpt.repository.mapper.ChatgptMessageRecordMapper">
  <resultMap id="BaseResultMap" type="cike.chatgpt.repository.entity.ChatgptMessageRecord">
    <id column="id" jdbcType="BIGINT" property="id"/>
    <result column="uid" jdbcType="VARCHAR" property="uid"/>
    <result column="conversation_id" jdbcType="VARCHAR" property="conversationId"/>
    <result column="system_message" jdbcType="VARCHAR" property="systemMessage"/>
    <result column="role" jdbcType="VARCHAR" property="role"/>
    <result column="role_message" jdbcType="VARCHAR" property="roleMessage"/>
    <result column="message_id" jdbcType="VARCHAR" property="messageId"/>
    <result column="created" jdbcType="BIGINT" property="created"/>
    <result column="model" jdbcType="VARCHAR" property="model"/>
    <result column="context_count" jdbcType="INTEGER" property="contextCount"/>
    <result column="prompt_tokens" jdbcType="INTEGER" property="promptTokens"/>
    <result column="status" jdbcType="TINYINT" property="status"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, `uid`, conversation_id, system_message, `role`, role_message, message_id, created, 
    model, context_count, prompt_tokens, `status`, create_time
  </sql>
  <select id="selectByExample" parameterType="cike.chatgpt.repository.entity.ChatgptMessageRecordExample"
    resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List"/>
    from chatgpt_message_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from chatgpt_message_record
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete
    from chatgpt_message_record
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="cike.chatgpt.repository.entity.ChatgptMessageRecordExample">
    delete from chatgpt_message_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id"
    parameterType="cike.chatgpt.repository.entity.ChatgptMessageRecord" useGeneratedKeys="true">
    insert into chatgpt_message_record (`uid`, conversation_id, system_message,
                                        `role`, role_message, message_id,
                                        created, model, context_count,
                                        prompt_tokens, `status`, create_time)
    values (#{uid,jdbcType=VARCHAR}, #{conversationId,jdbcType=VARCHAR}, #{systemMessage,jdbcType=VARCHAR},
            #{role,jdbcType=VARCHAR}, #{roleMessage,jdbcType=VARCHAR}, #{messageId,jdbcType=VARCHAR},
            #{created,jdbcType=BIGINT}, #{model,jdbcType=VARCHAR}, #{contextCount,jdbcType=INTEGER},
            #{promptTokens,jdbcType=INTEGER}, #{status,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id"
    parameterType="cike.chatgpt.repository.entity.ChatgptMessageRecord" useGeneratedKeys="true">
    insert into chatgpt_message_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        `uid`,
      </if>
      <if test="conversationId != null">
        conversation_id,
      </if>
      <if test="systemMessage != null">
        system_message,
      </if>
      <if test="role != null">
        `role`,
      </if>
      <if test="roleMessage != null">
        role_message,
      </if>
      <if test="messageId != null">
        message_id,
      </if>
      <if test="created != null">
        created,
      </if>
      <if test="model != null">
        model,
      </if>
      <if test="contextCount != null">
        context_count,
      </if>
      <if test="promptTokens != null">
        prompt_tokens,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        #{uid,jdbcType=VARCHAR},
      </if>
      <if test="conversationId != null">
        #{conversationId,jdbcType=VARCHAR},
      </if>
      <if test="systemMessage != null">
        #{systemMessage,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        #{role,jdbcType=VARCHAR},
      </if>
      <if test="roleMessage != null">
        #{roleMessage,jdbcType=VARCHAR},
      </if>
      <if test="messageId != null">
        #{messageId,jdbcType=VARCHAR},
      </if>
      <if test="created != null">
        #{created,jdbcType=BIGINT},
      </if>
      <if test="model != null">
        #{model,jdbcType=VARCHAR},
      </if>
      <if test="contextCount != null">
        #{contextCount,jdbcType=INTEGER},
      </if>
      <if test="promptTokens != null">
        #{promptTokens,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cike.chatgpt.repository.entity.ChatgptMessageRecordExample"
    resultType="java.lang.Long">
    select count(*) from chatgpt_message_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update chatgpt_message_record
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.uid != null">
        `uid` = #{record.uid,jdbcType=VARCHAR},
      </if>
      <if test="record.conversationId != null">
        conversation_id = #{record.conversationId,jdbcType=VARCHAR},
      </if>
      <if test="record.systemMessage != null">
        system_message = #{record.systemMessage,jdbcType=VARCHAR},
      </if>
      <if test="record.role != null">
        `role` = #{record.role,jdbcType=VARCHAR},
      </if>
      <if test="record.roleMessage != null">
        role_message = #{record.roleMessage,jdbcType=VARCHAR},
      </if>
      <if test="record.messageId != null">
        message_id = #{record.messageId,jdbcType=VARCHAR},
      </if>
      <if test="record.created != null">
        created = #{record.created,jdbcType=BIGINT},
      </if>
      <if test="record.model != null">
        model = #{record.model,jdbcType=VARCHAR},
      </if>
      <if test="record.contextCount != null">
        context_count = #{record.contextCount,jdbcType=INTEGER},
      </if>
      <if test="record.promptTokens != null">
        prompt_tokens = #{record.promptTokens,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update chatgpt_message_record
    set id = #{record.id,jdbcType=BIGINT},
    `uid` = #{record.uid,jdbcType=VARCHAR},
    conversation_id = #{record.conversationId,jdbcType=VARCHAR},
    system_message = #{record.systemMessage,jdbcType=VARCHAR},
    `role` = #{record.role,jdbcType=VARCHAR},
    role_message = #{record.roleMessage,jdbcType=VARCHAR},
    message_id = #{record.messageId,jdbcType=VARCHAR},
    created = #{record.created,jdbcType=BIGINT},
    model = #{record.model,jdbcType=VARCHAR},
    context_count = #{record.contextCount,jdbcType=INTEGER},
    prompt_tokens = #{record.promptTokens,jdbcType=INTEGER},
    `status` = #{record.status,jdbcType=TINYINT},
    create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cike.chatgpt.repository.entity.ChatgptMessageRecord">
    update chatgpt_message_record
    <set>
      <if test="uid != null">
        `uid` = #{uid,jdbcType=VARCHAR},
      </if>
      <if test="conversationId != null">
        conversation_id = #{conversationId,jdbcType=VARCHAR},
      </if>
      <if test="systemMessage != null">
        system_message = #{systemMessage,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        `role` = #{role,jdbcType=VARCHAR},
      </if>
      <if test="roleMessage != null">
        role_message = #{roleMessage,jdbcType=VARCHAR},
      </if>
      <if test="messageId != null">
        message_id = #{messageId,jdbcType=VARCHAR},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=BIGINT},
      </if>
      <if test="model != null">
        model = #{model,jdbcType=VARCHAR},
      </if>
      <if test="contextCount != null">
        context_count = #{contextCount,jdbcType=INTEGER},
      </if>
      <if test="promptTokens != null">
        prompt_tokens = #{promptTokens,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="cike.chatgpt.repository.entity.ChatgptMessageRecord">
    update chatgpt_message_record
    set `uid`           = #{uid,jdbcType=VARCHAR},
        conversation_id = #{conversationId,jdbcType=VARCHAR},
        system_message  = #{systemMessage,jdbcType=VARCHAR},
        `role`          = #{role,jdbcType=VARCHAR},
        role_message    = #{roleMessage,jdbcType=VARCHAR},
        message_id      = #{messageId,jdbcType=VARCHAR},
        created         = #{created,jdbcType=BIGINT},
        model           = #{model,jdbcType=VARCHAR},
        context_count   = #{contextCount,jdbcType=INTEGER},
        prompt_tokens   = #{promptTokens,jdbcType=INTEGER},
        `status`        = #{status,jdbcType=TINYINT},
        create_time     = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>