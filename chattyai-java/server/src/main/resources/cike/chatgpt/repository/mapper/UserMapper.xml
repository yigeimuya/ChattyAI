<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cike.chatgpt.repository.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="cike.chatgpt.repository.entity.User">
    <id column="id" jdbcType="INTEGER" property="id"/>
    <result column="uid" jdbcType="VARCHAR" property="uid"/>
    <result column="username" jdbcType="VARCHAR" property="username"/>
    <result column="role" jdbcType="VARCHAR" property="role"/>
    <result column="nickname" jdbcType="VARCHAR" property="nickname"/>
    <result column="password_hash" jdbcType="VARCHAR" property="passwordHash"/>
    <result column="email" jdbcType="VARCHAR" property="email"/>
    <result column="avatar" jdbcType="VARCHAR" property="avatar"/>
    <result column="status" jdbcType="TINYINT" property="status"/>
    <result column="description" jdbcType="VARCHAR" property="description"/>
    <result column="expired_time" jdbcType="TIMESTAMP" property="expiredTime"/>
    <result column="invitation_code" jdbcType="VARCHAR" property="invitationCode"/>
    <result column="invitation_from" jdbcType="VARCHAR" property="invitationFrom"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, `uid`, username, `role`, nickname, password_hash, email, avatar, `status`, description, 
    expired_time, invitation_code, invitation_from, create_time, update_time
  </sql>
  <select id="selectByExample" parameterType="cike.chatgpt.repository.entity.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List"/>
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete
    from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cike.chatgpt.repository.entity.UserExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </delete>
  <insert id="insert" parameterType="cike.chatgpt.repository.entity.User">
    insert into user (id, `uid`, username,
                      `role`, nickname, password_hash,
                      email, avatar, `status`,
                      description, expired_time, invitation_code,
                      invitation_from, create_time, update_time)
    values (#{id,jdbcType=INTEGER}, #{uid,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR},
            #{role,jdbcType=VARCHAR}, #{nickname,jdbcType=VARCHAR}, #{passwordHash,jdbcType=VARCHAR},
            #{email,jdbcType=VARCHAR}, #{avatar,jdbcType=VARCHAR}, #{status,jdbcType=TINYINT},
            #{description,jdbcType=VARCHAR}, #{expiredTime,jdbcType=TIMESTAMP}, #{invitationCode,jdbcType=VARCHAR},
            #{invitationFrom,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="cike.chatgpt.repository.entity.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="uid != null">
        `uid`,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="role != null">
        `role`,
      </if>
      <if test="nickname != null">
        nickname,
      </if>
      <if test="passwordHash != null">
        password_hash,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="avatar != null">
        avatar,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="expiredTime != null">
        expired_time,
      </if>
      <if test="invitationCode != null">
        invitation_code,
      </if>
      <if test="invitationFrom != null">
        invitation_from,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        #{role,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="passwordHash != null">
        #{passwordHash,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="avatar != null">
        #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="expiredTime != null">
        #{expiredTime,jdbcType=TIMESTAMP},
      </if>
      <if test="invitationCode != null">
        #{invitationCode,jdbcType=VARCHAR},
      </if>
      <if test="invitationFrom != null">
        #{invitationFrom,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cike.chatgpt.repository.entity.UserExample" resultType="java.lang.Long">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.uid != null">
        `uid` = #{record.uid,jdbcType=VARCHAR},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.role != null">
        `role` = #{record.role,jdbcType=VARCHAR},
      </if>
      <if test="record.nickname != null">
        nickname = #{record.nickname,jdbcType=VARCHAR},
      </if>
      <if test="record.passwordHash != null">
        password_hash = #{record.passwordHash,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.avatar != null">
        avatar = #{record.avatar,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.expiredTime != null">
        expired_time = #{record.expiredTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.invitationCode != null">
        invitation_code = #{record.invitationCode,jdbcType=VARCHAR},
      </if>
      <if test="record.invitationFrom != null">
        invitation_from = #{record.invitationFrom,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set id = #{record.id,jdbcType=INTEGER},
    `uid` = #{record.uid,jdbcType=VARCHAR},
    username = #{record.username,jdbcType=VARCHAR},
    `role` = #{record.role,jdbcType=VARCHAR},
    nickname = #{record.nickname,jdbcType=VARCHAR},
    password_hash = #{record.passwordHash,jdbcType=VARCHAR},
    email = #{record.email,jdbcType=VARCHAR},
    avatar = #{record.avatar,jdbcType=VARCHAR},
    `status` = #{record.status,jdbcType=TINYINT},
    description = #{record.description,jdbcType=VARCHAR},
    expired_time = #{record.expiredTime,jdbcType=TIMESTAMP},
    invitation_code = #{record.invitationCode,jdbcType=VARCHAR},
    invitation_from = #{record.invitationFrom,jdbcType=VARCHAR},
    create_time = #{record.createTime,jdbcType=TIMESTAMP},
    update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cike.chatgpt.repository.entity.User">
    update user
    <set>
      <if test="uid != null">
        `uid` = #{uid,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        `role` = #{role,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="passwordHash != null">
        password_hash = #{passwordHash,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="avatar != null">
        avatar = #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="expiredTime != null">
        expired_time = #{expiredTime,jdbcType=TIMESTAMP},
      </if>
      <if test="invitationCode != null">
        invitation_code = #{invitationCode,jdbcType=VARCHAR},
      </if>
      <if test="invitationFrom != null">
        invitation_from = #{invitationFrom,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cike.chatgpt.repository.entity.User">
    update user
    set `uid`           = #{uid,jdbcType=VARCHAR},
        username        = #{username,jdbcType=VARCHAR},
        `role`          = #{role,jdbcType=VARCHAR},
        nickname        = #{nickname,jdbcType=VARCHAR},
        password_hash   = #{passwordHash,jdbcType=VARCHAR},
        email           = #{email,jdbcType=VARCHAR},
        avatar          = #{avatar,jdbcType=VARCHAR},
        `status`        = #{status,jdbcType=TINYINT},
        description     = #{description,jdbcType=VARCHAR},
        expired_time    = #{expiredTime,jdbcType=TIMESTAMP},
        invitation_code = #{invitationCode,jdbcType=VARCHAR},
        invitation_from = #{invitationFrom,jdbcType=VARCHAR},
        create_time     = #{createTime,jdbcType=TIMESTAMP},
        update_time     = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>